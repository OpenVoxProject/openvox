.\" generated with Ronn-NG/v0.10.1
.\" http://github.com/apjanke/ronn-ng/tree/0.10.1
.TH "PUPPET\-NODE" "8" "January 2025" "Vox Pupuli" "OpenVox manual"
.SH "NAME"
\fBpuppet\-node\fR \- View and manage node definitions\.
.SH "SYNOPSIS"
puppet node \fIaction\fR [\-\-terminus _TERMINUS]
.SH "DESCRIPTION"
This subcommand interacts with node objects, which are used by OpenVox to build a catalog\. A node object consists of the node's facts, environment, node parameters (exposed in the parser as top\-scope variables), and classes\.
.SH "OPTIONS"
Note that any setting that's valid in the configuration file is also a valid long argument, although it may or may not be relevant to the present action\. For example, \fBserver\fR and \fBrun_mode\fR are valid settings, so you can specify \fB\-\-server <servername>\fR, or \fB\-\-run_mode <runmode>\fR as an argument\.
.P
See the configuration file documentation at \fIhttps://puppet\.com/docs/puppet/latest/configuration\.html\fR for the full list of acceptable parameters\. A commented list of all configuration options can also be generated by running puppet with \fB\-\-genconfig\fR\.
.TP
\-\-render\-as FORMAT
The format in which to render output\. The most common formats are \fBjson\fR, \fBs\fR (string), \fByaml\fR, and \fBconsole\fR, but other options such as \fBdot\fR are sometimes available\.
.TP
\-\-verbose
Whether to log verbosely\.
.TP
\-\-debug
Whether to log debug information\.
.TP
\-\-terminus _TERMINUS
Indirector faces expose indirected subsystems of Puppet\. These subsystems are each able to retrieve and alter a specific type of data (with the familiar actions of \fBfind\fR, \fBsearch\fR, \fBsave\fR, and \fBdestroy\fR) from an arbitrary number of pluggable backends\. In Puppet parlance, these backends are called terminuses\.
.IP
Almost all indirected subsystems have a \fBrest\fR terminus that interacts with the puppet master's data\. Most of them have additional terminuses for various local data models, which are in turn used by the indirected subsystem on the puppet master whenever it receives a remote request\.
.IP
The terminus for an action is often determined by context, but occasionally needs to be set explicitly\. See the "Notes" section of this face's manpage for more details\.
.SH "ACTIONS"
.TP
\fBclean\fR \- Clean up signed certs, cached facts, node objects, and reports for a node stored by the puppetmaster
\fBSYNOPSIS\fR
.IP
puppet node clean [\-\-terminus _TERMINUS] \fIhost1\fR [\fIhost2\fR \|\.\|\.\|\.]
.IP
\fBDESCRIPTION\fR
.IP
Cleans up the following information a puppet master knows about a node:
.IP
\fISigned certificates\fR \- ($vardir/ssl/ca/signed/node\.domain\.pem)
.IP
\fICached facts\fR \- ($vardir/yaml/facts/node\.domain\.yaml)
.IP
\fICached node objects\fR \- ($vardir/yaml/node/node\.domain\.yaml)
.IP
\fIReports\fR \- ($vardir/reports/node\.domain)
.IP
NOTE: this action now cleans up certs via Puppet Server's CA API\. A running server is required for certs to be cleaned\.
.TP
\fBdecrypt\fR \- Decrypt a value using the agent's own certificate
\fBSYNOPSIS\fR
.IP
puppet node decrypt [\-\-terminus _TERMINUS] [\-d DATA | \-\-data DATA] [\-e VARIABLE | \-\-env VARIABLE]
.IP
\fBDESCRIPTION\fR
.IP
Decrypt a value using the agent's own certificate\. You have three ways to pass data for decryption\. You can pass it directly on the command line (if your kernel allows command strings that long), you can set it in an environment variable and pass the name of the variable, or you can pipe it using STDIN\.
.IP
\fBOPTIONS\fR \fI\-d DATA\fR | \fI\-\-data DATA\fR \- An string of data to decrypt
.IP
\fI\-e VARIABLE\fR | \fI\-\-env VARIABLE\fR \- An environment variable containing data to decrypt
.TP
\fBencrypt\fR \- Encrypt a value using a specified agent's certificate
\fBSYNOPSIS\fR
.IP
puppet node encrypt [\-\-terminus _TERMINUS] [\-t CERTNAME | \-\-target CERTNAME] \fIstring\fR
.IP
\fBDESCRIPTION\fR
.IP
Encrypt a value using a specified agent's certificate useful for pasting into a manifest for a node_encrypted_file resource type, or for a data value for a datacat fragment\.
.IP
This will only run properly on a CA node with access to each node's signed public certificate\.
.IP
\fBOPTIONS\fR \fI\-t CERTNAME\fR | \fI\-\-target CERTNAME\fR \- Which agent to encrypt for
.TP
\fBfind\fR \- Retrieve a node object\.
\fBSYNOPSIS\fR
.IP
puppet node find [\-\-terminus _TERMINUS] \fIhost\fR
.IP
\fBDESCRIPTION\fR
.IP
Retrieve a node object\.
.IP
\fBRETURNS\fR
.IP
A hash containing the node's \fBclasses\fR, \fBenvironment\fR, \fBexpiration\fR, \fBname\fR, \fBparameters\fR (its facts, combined with any ENC\-set parameters), and \fBtime\fR\. When used from the Ruby API: a Puppet::Node object\.
.IP
RENDERING ISSUES: Rendering as string and json are currently broken; node objects can only be rendered as yaml\.
.TP
\fBinfo\fR \- Print the default terminus class for this face\.
\fBSYNOPSIS\fR
.IP
puppet node info [\-\-terminus _TERMINUS]
.IP
\fBDESCRIPTION\fR
.IP
Prints the default terminus class for this subcommand\. Note that different run modes may have different default termini; when in doubt, specify the run mode with the '\-\-run_mode' option\.
.SH "EXAMPLES"
\fBdecrypt\fR
.P
$ puppet node decrypt \-\-data \fIencrypted blob of data\fR $ puppet node decrypt \-\-env \fIenvironment variable containing blob of encrypted data\fR $ echo \fIencrypted blob of data\fR | puppet node decrypt $ cat /file/with/encrypted/blob\.txt | puppet node decrypt
.P
\fBencrypt\fR
.P
$ puppet node encrypt \-\-certname testhost\.example\.com "some text to encrypt"
.P
\fBfind\fR
.P
Retrieve an "empty" (no classes, no ENC\-imposed parameters, and an environment of "production") node:
.P
$ puppet node find somenode\.puppetlabs\.lan \-\-terminus plain \-\-render\-as yaml
.P
Retrieve a node using the Puppet Server's configured ENC:
.P
$ puppet node find somenode\.puppetlabs\.lan \-\-terminus exec \-\-run_mode server \-\-render\-as yaml
.P
Retrieve the same node from the Puppet Server:
.P
$ puppet node find somenode\.puppetlabs\.lan \-\-terminus rest \-\-render\-as yaml
.SH "NOTES"
This subcommand is an indirector face, which exposes \fBfind\fR, \fBsearch\fR, \fBsave\fR, and \fBdestroy\fR actions for an indirected subsystem of Puppet\. Valid termini for this face include:
.IP "\(bu" 4
\fBexec\fR
.IP "\(bu" 4
\fBjson\fR
.IP "\(bu" 4
\fBmemory\fR
.IP "\(bu" 4
\fBmsgpack\fR
.IP "\(bu" 4
\fBplain\fR
.IP "\(bu" 4
\fBrest\fR
.IP "\(bu" 4
\fBstore_configs\fR
.IP "\(bu" 4
\fByaml\fR
.IP "" 0
.SH "COPYRIGHT AND LICENSE"
Copyright 2011 by Puppet Inc\., Vox Pupuli Apache 2 license; see COPYING
